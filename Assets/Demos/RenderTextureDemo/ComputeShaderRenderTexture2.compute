#pragma kernel CSMain

# define NUM_LAYERS 4.

RWTexture2D<float4> Result;
float Resolution;
float Time;

float2x2 Rot(float a){
    float s = sin(a), c = cos(a);
    return float2x2(c, -s, s, c);
}

float Star(float2 uv, float flare){
    float d = length(uv);
    float m = .05 / d;
    
    float rays = max(0., 1.-abs(uv.x*uv.y*1000.));
    m += rays * flare;
    
    uv = mul(uv, Rot(3.1415/4.));
    // uv *= Rot(3.1415/4.);
    rays = max(0., 1.-abs(uv.x*uv.y*1000.));
    m += rays*.3 * flare;
    
    m *= smoothstep(1., .2, d);
    return m;
}

float Hash21(float2 p){
    p = frac(p*float2(123.34, 456.21));
    p += dot(p, p+45.32);
    return frac(p.x*p.y);
}

float3 StarLayer(float2 uv){
    float3 col = float3(0, 0, 0);
    
    float2 gv = frac(uv) - .5;
    float2 id = floor(uv);
    
    for(int y=-1; y<=1; y++){
        for(int x=-1; x<=1; x++){
            float2 offs = float2(x, y);
            float n = Hash21(id+offs); // random between 0 and 1;
            float size = frac(n*345.32);
            float star = Star(gv-offs-(float2(n, frac(n*34.))-.5), smoothstep(.9, 1., size)*.6);
            
            float3 color = sin(float3(1, 1, 1)*frac(n*2345.2)*123.2)*.5+.5;
            col += star * size * color;
        }
    }
    return col;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy/Resolution * 2.0 - 1.0;
    float t = Time * .06;
    float3 col = float3(0, 0, 0);
    
    // uv *= Rot(t);
    uv = mul(uv, Rot(t));
    for(float i = 0.; i < 1.; i+=1./NUM_LAYERS){
        float depth = frac(i+t);
        float scale = lerp(20., .5, depth);
        float fade = depth * smoothstep(1., .9, depth);
        col += StarLayer(uv*scale + i*453.2) * fade;
    }
    Result[id.xy] = float4(col, 1.);
}